
course_work_raspopina.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000728  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007e8  080007e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007e8  080007e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080007e8  080007e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007e8  080007e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007e8  080007e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007ec  080007ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080007f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  080007f4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080007f4  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015d3  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c3  00000000  00000000  000215ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00021cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e8  00000000  00000000  00021e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000a7f8  00000000  00000000  00021f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002484  00000000  00000000  0002c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00036c8e  00000000  00000000  0002eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006581a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002c4  00000000  00000000  00065870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080007d0 	.word	0x080007d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080007d0 	.word	0x080007d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000224:	46c0      	nop			; (mov r8, r8)
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <angle_encoder_data>:
 * description : считывание текущего угла
 * author : Ju
 * date : 2021-10-20
 * version : final
 */
void angle_encoder_data(){
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	data = (uint8_t)TIM3->CNT;
 8000230:	4b03      	ldr	r3, [pc, #12]	; (8000240 <angle_encoder_data+0x14>)
 8000232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4b03      	ldr	r3, [pc, #12]	; (8000244 <angle_encoder_data+0x18>)
 8000238:	701a      	strb	r2, [r3, #0]
}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}
 8000240:	40000400 	.word	0x40000400
 8000244:	20000026 	.word	0x20000026

08000248 <gpio_init_encoder_1>:
 * description : инициализация портов gpio для выводов clk - PA6 и DT - PA7 (данные)
 * author : Ju
 * date : 2021-09-29
 * version : final
 */
void gpio_init_encoder_1(){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; //clocking
 800024c:	4b1e      	ldr	r3, [pc, #120]	; (80002c8 <gpio_init_encoder_1+0x80>)
 800024e:	695a      	ldr	r2, [r3, #20]
 8000250:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <gpio_init_encoder_1+0x80>)
 8000252:	2180      	movs	r1, #128	; 0x80
 8000254:	0289      	lsls	r1, r1, #10
 8000256:	430a      	orrs	r2, r1
 8000258:	615a      	str	r2, [r3, #20]
#ifdef ENCODER_KY40
	GPIOA->MODER |= GPIO_MODER_MODER6_1; //alternative
 800025a:	2390      	movs	r3, #144	; 0x90
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2180      	movs	r1, #128	; 0x80
 8000266:	0189      	lsls	r1, r1, #6
 8000268:	430a      	orrs	r2, r1
 800026a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_1;
 800026c:	2390      	movs	r3, #144	; 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	2390      	movs	r3, #144	; 0x90
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	2180      	movs	r1, #128	; 0x80
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	430a      	orrs	r2, r1
 800027c:	601a      	str	r2, [r3, #0]

	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR6; //сбрасывание подтягивания резисторов
 800027e:	2390      	movs	r3, #144	; 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	68da      	ldr	r2, [r3, #12]
 8000284:	2390      	movs	r3, #144	; 0x90
 8000286:	05db      	lsls	r3, r3, #23
 8000288:	4910      	ldr	r1, [pc, #64]	; (80002cc <gpio_init_encoder_1+0x84>)
 800028a:	400a      	ands	r2, r1
 800028c:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR7;
 800028e:	2390      	movs	r3, #144	; 0x90
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	68da      	ldr	r2, [r3, #12]
 8000294:	2390      	movs	r3, #144	; 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	490d      	ldr	r1, [pc, #52]	; (80002d0 <gpio_init_encoder_1+0x88>)
 800029a:	400a      	ands	r2, r1
 800029c:	60da      	str	r2, [r3, #12]

	GPIOA->AFR[0] |= (1UL << GPIO_AFRL_AFSEL6_Pos); //AF
 800029e:	2390      	movs	r3, #144	; 0x90
 80002a0:	05db      	lsls	r3, r3, #23
 80002a2:	6a1a      	ldr	r2, [r3, #32]
 80002a4:	2390      	movs	r3, #144	; 0x90
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	2180      	movs	r1, #128	; 0x80
 80002aa:	0449      	lsls	r1, r1, #17
 80002ac:	430a      	orrs	r2, r1
 80002ae:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1UL << GPIO_AFRL_AFSEL7_Pos);
 80002b0:	2390      	movs	r3, #144	; 0x90
 80002b2:	05db      	lsls	r3, r3, #23
 80002b4:	6a1a      	ldr	r2, [r3, #32]
 80002b6:	2390      	movs	r3, #144	; 0x90
 80002b8:	05db      	lsls	r3, r3, #23
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	0549      	lsls	r1, r1, #21
 80002be:	430a      	orrs	r2, r1
 80002c0:	621a      	str	r2, [r3, #32]
#endif
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40021000 	.word	0x40021000
 80002cc:	ffffcfff 	.word	0xffffcfff
 80002d0:	ffff3fff 	.word	0xffff3fff

080002d4 <tim3_init_encoder_1>:

//remove it into tim.h or delete tim.h
void tim3_init_encoder_1(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; //clocking
 80002d8:	4b27      	ldr	r3, [pc, #156]	; (8000378 <tim3_init_encoder_1+0xa4>)
 80002da:	69da      	ldr	r2, [r3, #28]
 80002dc:	4b26      	ldr	r3, [pc, #152]	; (8000378 <tim3_init_encoder_1+0xa4>)
 80002de:	2102      	movs	r1, #2
 80002e0:	430a      	orrs	r2, r1
 80002e2:	61da      	str	r2, [r3, #28]
	/*	01: CC2 channel is configured as input, IC2 is mapped on TI2
		10: CC2 channel is configured as input, IC2 is mapped on TI1	*/
	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_1);
 80002e4:	4b25      	ldr	r3, [pc, #148]	; (800037c <tim3_init_encoder_1+0xa8>)
 80002e6:	699a      	ldr	r2, [r3, #24]
 80002e8:	4b24      	ldr	r3, [pc, #144]	; (800037c <tim3_init_encoder_1+0xa8>)
 80002ea:	4925      	ldr	r1, [pc, #148]	; (8000380 <tim3_init_encoder_1+0xac>)
 80002ec:	430a      	orrs	r2, r1
 80002ee:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &= ~(TIM_CCMR1_CC1S_1 | TIM_CCMR1_CC2S_0);
 80002f0:	4b22      	ldr	r3, [pc, #136]	; (800037c <tim3_init_encoder_1+0xa8>)
 80002f2:	699a      	ldr	r2, [r3, #24]
 80002f4:	4b21      	ldr	r3, [pc, #132]	; (800037c <tim3_init_encoder_1+0xa8>)
 80002f6:	4923      	ldr	r1, [pc, #140]	; (8000384 <tim3_init_encoder_1+0xb0>)
 80002f8:	400a      	ands	r2, r1
 80002fa:	619a      	str	r2, [r3, #24]
	/*	00: noninverted/rising edge
			Circuit is sensitive to TIxFP1 rising edge (capture, trigger in reset, external clock or trigger
			mode), TIxFP1 is not inverted (trigger in gated mode, encoder mode).	*/
	TIM3->CCER &= (~TIM_CCER_CC1P);
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <tim3_init_encoder_1+0xa8>)
 80002fe:	6a1a      	ldr	r2, [r3, #32]
 8000300:	4b1e      	ldr	r3, [pc, #120]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000302:	2102      	movs	r1, #2
 8000304:	438a      	bics	r2, r1
 8000306:	621a      	str	r2, [r3, #32]
	TIM3->CCER &= (~TIM_CCER_CC2P);
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <tim3_init_encoder_1+0xa8>)
 800030a:	6a1a      	ldr	r2, [r3, #32]
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <tim3_init_encoder_1+0xa8>)
 800030e:	2120      	movs	r1, #32
 8000310:	438a      	bics	r2, r1
 8000312:	621a      	str	r2, [r3, #32]
	TIM3->CCER &= (~TIM_CCER_CC1NP);
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000316:	6a1a      	ldr	r2, [r3, #32]
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <tim3_init_encoder_1+0xa8>)
 800031a:	2108      	movs	r1, #8
 800031c:	438a      	bics	r2, r1
 800031e:	621a      	str	r2, [r3, #32]
	TIM3->CCER &= (~TIM_CCER_CC2NP);
 8000320:	4b16      	ldr	r3, [pc, #88]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000322:	6a1a      	ldr	r2, [r3, #32]
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000326:	2180      	movs	r1, #128	; 0x80
 8000328:	438a      	bics	r2, r1
 800032a:	621a      	str	r2, [r3, #32]
	/*	001: Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2
			 level.	*/
	TIM3->SMCR &= ~(TIM_SMCR_SMS);
 800032c:	4b13      	ldr	r3, [pc, #76]	; (800037c <tim3_init_encoder_1+0xa8>)
 800032e:	689a      	ldr	r2, [r3, #8]
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000332:	2107      	movs	r1, #7
 8000334:	438a      	bics	r2, r1
 8000336:	609a      	str	r2, [r3, #8]
	TIM3->SMCR |= (TIM_SMCR_SMS_0);
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <tim3_init_encoder_1+0xa8>)
 800033a:	689a      	ldr	r2, [r3, #8]
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <tim3_init_encoder_1+0xa8>)
 800033e:	2101      	movs	r1, #1
 8000340:	430a      	orrs	r2, r1
 8000342:	609a      	str	r2, [r3, #8]
	/*	1111 - 1/32 rate	*/
	TIM3->CCMR1 |= (TIM_CCMR1_IC1F_0 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_3);
 8000344:	4b0d      	ldr	r3, [pc, #52]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000346:	699a      	ldr	r2, [r3, #24]
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <tim3_init_encoder_1+0xa8>)
 800034a:	21f0      	movs	r1, #240	; 0xf0
 800034c:	430a      	orrs	r2, r1
 800034e:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= (TIM_CCMR1_IC2F_0 | TIM_CCMR1_IC2F_1 | TIM_CCMR1_IC2F_2 | TIM_CCMR1_IC2F_3);
 8000350:	4b0a      	ldr	r3, [pc, #40]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000352:	699a      	ldr	r2, [r3, #24]
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000356:	21f0      	movs	r1, #240	; 0xf0
 8000358:	0209      	lsls	r1, r1, #8
 800035a:	430a      	orrs	r2, r1
 800035c:	619a      	str	r2, [r3, #24]

	TIM3->ARR = 30; //проверить и поставить больше в зависимости от угла
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000360:	221e      	movs	r2, #30
 8000362:	62da      	str	r2, [r3, #44]	; 0x2c
	//value 30 - 11.25 - 360 gr
	TIM3->CR1 |= TIM_CR1_CEN;
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <tim3_init_encoder_1+0xa8>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <tim3_init_encoder_1+0xa8>)
 800036a:	2101      	movs	r1, #1
 800036c:	430a      	orrs	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	40021000 	.word	0x40021000
 800037c:	40000400 	.word	0x40000400
 8000380:	00000201 	.word	0x00000201
 8000384:	fffffefd 	.word	0xfffffefd

08000388 <init_function>:

#include "main.h"

int i;

void init_function(){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	usart1_init();
 800038c:	f000 f99a 	bl	80006c4 <usart1_init>
	gpio_init_encoder_1();
 8000390:	f7ff ff5a 	bl	8000248 <gpio_init_encoder_1>
	tim3_init_encoder_1();
 8000394:	f7ff ff9e 	bl	80002d4 <tim3_init_encoder_1>
	gpio_init_tilt();
 8000398:	f000 f81a 	bl	80003d0 <gpio_init_tilt>
	start_stop = 1;
 800039c:	4b02      	ldr	r3, [pc, #8]	; (80003a8 <init_function+0x20>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	2000002c 	.word	0x2000002c

080003ac <main>:

int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
   init_function();
 80003b0:	f7ff ffea 	bl	8000388 <init_function>
   while(start_stop){
 80003b4:	e001      	b.n	80003ba <main+0xe>
#ifdef FINAL_PROGRAM
	  transfer_pac_data();
 80003b6:	f000 f883 	bl	80004c0 <transfer_pac_data>
   while(start_stop){
 80003ba:	4b04      	ldr	r3, [pc, #16]	; (80003cc <main+0x20>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d1f9      	bne.n	80003b6 <main+0xa>
 80003c2:	2300      	movs	r3, #0
#endif
   }
}
 80003c4:	0018      	movs	r0, r3
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	46c0      	nop			; (mov r8, r8)
 80003cc:	2000002c 	.word	0x2000002c

080003d0 <gpio_init_tilt>:
 * description : инициализация портов PA11 - DDO2, PA12 - DDO1 для считывания текущего положения с датчика наклона
 * author : Jul
 * date : 2021-10-15
 * version : v1.0
 */
void gpio_init_tilt(){
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~GPIO_MODER_MODER12; //input mode
 80003d4:	2390      	movs	r3, #144	; 0x90
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	2390      	movs	r3, #144	; 0x90
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	4918      	ldr	r1, [pc, #96]	; (8000440 <gpio_init_tilt+0x70>)
 80003e0:	400a      	ands	r2, r1
 80003e2:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODER11;
 80003e4:	2390      	movs	r3, #144	; 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	681a      	ldr	r2, [r3, #0]
 80003ea:	2390      	movs	r3, #144	; 0x90
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	4915      	ldr	r1, [pc, #84]	; (8000444 <gpio_init_tilt+0x74>)
 80003f0:	400a      	ands	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]

	#ifdef PUPDR_ON
		GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR12_0;
 80003f4:	2390      	movs	r3, #144	; 0x90
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	68da      	ldr	r2, [r3, #12]
 80003fa:	2390      	movs	r3, #144	; 0x90
 80003fc:	05db      	lsls	r3, r3, #23
 80003fe:	4912      	ldr	r1, [pc, #72]	; (8000448 <gpio_init_tilt+0x78>)
 8000400:	400a      	ands	r2, r1
 8000402:	60da      	str	r2, [r3, #12]
		GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR11_0;
 8000404:	2390      	movs	r3, #144	; 0x90
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	68da      	ldr	r2, [r3, #12]
 800040a:	2390      	movs	r3, #144	; 0x90
 800040c:	05db      	lsls	r3, r3, #23
 800040e:	490f      	ldr	r1, [pc, #60]	; (800044c <gpio_init_tilt+0x7c>)
 8000410:	400a      	ands	r2, r1
 8000412:	60da      	str	r2, [r3, #12]
		GPIOA->PUPDR |= GPIO_PUPDR_PUPDR12_1; //pull down
 8000414:	2390      	movs	r3, #144	; 0x90
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	68da      	ldr	r2, [r3, #12]
 800041a:	2390      	movs	r3, #144	; 0x90
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	2180      	movs	r1, #128	; 0x80
 8000420:	0489      	lsls	r1, r1, #18
 8000422:	430a      	orrs	r2, r1
 8000424:	60da      	str	r2, [r3, #12]
		GPIOA->PUPDR |= GPIO_PUPDR_PUPDR11_1;
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	68da      	ldr	r2, [r3, #12]
 800042c:	2390      	movs	r3, #144	; 0x90
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0409      	lsls	r1, r1, #16
 8000434:	430a      	orrs	r2, r1
 8000436:	60da      	str	r2, [r3, #12]
	#endif
}
 8000438:	46c0      	nop			; (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	fcffffff 	.word	0xfcffffff
 8000444:	ff3fffff 	.word	0xff3fffff
 8000448:	feffffff 	.word	0xfeffffff
 800044c:	ffbfffff 	.word	0xffbfffff

08000450 <position_tilt_data>:
 * description : считывание положения с датчика наклона с выводов DDO1 и DDO2 в переменные ddo1 и ddo2 соответственно
 * author : Jul
 * date : 2021-10-15
 * version : final
 */
void position_tilt_data(){
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
     * ddo1 - 1, ddo2 - 1 : вниз и нейтрально
     * ddo1 - 0, ddo2 - 0 : вверх
     * ddo1 - 1, ddo2 - 0 : вправо
     * ddo1 - 0, ddo2 - 1 : влево
     */
	ddo1 = (GPIOA->IDR & GPIO_IDR_12) >> 12; //inversion for convenience
 8000454:	2390      	movs	r3, #144	; 0x90
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	0b1b      	lsrs	r3, r3, #12
 800045c:	2201      	movs	r2, #1
 800045e:	401a      	ands	r2, r3
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <position_tilt_data+0x2c>)
 8000462:	601a      	str	r2, [r3, #0]
	ddo2 = (GPIOA->IDR & GPIO_IDR_11) >> 11;
 8000464:	2390      	movs	r3, #144	; 0x90
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	0adb      	lsrs	r3, r3, #11
 800046c:	2201      	movs	r2, #1
 800046e:	401a      	ands	r2, r3
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <position_tilt_data+0x30>)
 8000472:	601a      	str	r2, [r3, #0]
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	20000020 	.word	0x20000020
 8000480:	20000028 	.word	0x20000028

08000484 <us_delay>:
 *      Author: Jul
 */

#include "tim.h"

void us_delay(uint32_t tick){
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
    tick*=(SystemCoreClock / 1000000)/5;
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <us_delay+0x34>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	490a      	ldr	r1, [pc, #40]	; (80004bc <us_delay+0x38>)
 8000492:	0018      	movs	r0, r3
 8000494:	f7ff fe38 	bl	8000108 <__udivsi3>
 8000498:	0003      	movs	r3, r0
 800049a:	001a      	movs	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4353      	muls	r3, r2
 80004a0:	607b      	str	r3, [r7, #4]
    while (tick--);
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	607a      	str	r2, [r7, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1fa      	bne.n	80004a4 <us_delay+0x20>
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000000 	.word	0x20000000
 80004bc:	004c4b40 	.word	0x004c4b40

080004c0 <transfer_pac_data>:
 * description : функция осуществлет передачу пакета данных в регистр TDR
 * author : Ju
 * date : 2021-10-20
 * version : final
 */
void transfer_pac_data(){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	position_tilt_data();
 80004c4:	f7ff ffc4 	bl	8000450 <position_tilt_data>
	angle_encoder_data();
 80004c8:	f7ff feb0 	bl	800022c <angle_encoder_data>
	USART1->TDR = packing_data();
 80004cc:	f000 f810 	bl	80004f0 <packing_data>
 80004d0:	0003      	movs	r3, r0
 80004d2:	001a      	movs	r2, r3
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <transfer_pac_data+0x2c>)
 80004d6:	b292      	uxth	r2, r2
 80004d8:	851a      	strh	r2, [r3, #40]	; 0x28
	us_delay(1000);
 80004da:	23fa      	movs	r3, #250	; 0xfa
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	0018      	movs	r0, r3
 80004e0:	f7ff ffd0 	bl	8000484 <us_delay>
	while(!(USART_ISR_TXE));
 80004e4:	46c0      	nop			; (mov r8, r8)
}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40013800 	.word	0x40013800

080004f0 <packing_data>:
 * description : объединение данных с датчика наклона и энкодера в одну переменную
 * author : Ju
 * date : 2021-10-20
 * version : final
 */
uint8_t packing_data(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	ddo1 = ddo1 << SHIFT;
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <packing_data+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	005a      	lsls	r2, r3, #1
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <packing_data+0x40>)
 80004fc:	601a      	str	r2, [r3, #0]
	data_tilt = (ddo1 | ddo2) << NUM_ENC_DATABITS; //st on msb bits
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <packing_data+0x40>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	b2da      	uxtb	r2, r3
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <packing_data+0x44>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4313      	orrs	r3, r2
 800050c:	b2db      	uxtb	r3, r3
 800050e:	019b      	lsls	r3, r3, #6
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <packing_data+0x48>)
 8000514:	701a      	strb	r2, [r3, #0]
	pac_data = data | data_tilt;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <packing_data+0x4c>)
 8000518:	781a      	ldrb	r2, [r3, #0]
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <packing_data+0x48>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	4313      	orrs	r3, r2
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b07      	ldr	r3, [pc, #28]	; (8000540 <packing_data+0x50>)
 8000524:	701a      	strb	r2, [r3, #0]
	return pac_data;
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <packing_data+0x50>)
 8000528:	781b      	ldrb	r3, [r3, #0]
}
 800052a:	0018      	movs	r0, r3
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000020 	.word	0x20000020
 8000534:	20000028 	.word	0x20000028
 8000538:	20000024 	.word	0x20000024
 800053c:	20000026 	.word	0x20000026
 8000540:	20000025 	.word	0x20000025

08000544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	0002      	movs	r2, r0
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b7f      	cmp	r3, #127	; 0x7f
 8000556:	d809      	bhi.n	800056c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	001a      	movs	r2, r3
 800055e:	231f      	movs	r3, #31
 8000560:	401a      	ands	r2, r3
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <__NVIC_EnableIRQ+0x30>)
 8000564:	2101      	movs	r1, #1
 8000566:	4091      	lsls	r1, r2
 8000568:	000a      	movs	r2, r1
 800056a:	601a      	str	r2, [r3, #0]
  }
}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}
 8000574:	e000e100 	.word	0xe000e100

08000578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	0002      	movs	r2, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	1dfb      	adds	r3, r7, #7
 8000584:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b7f      	cmp	r3, #127	; 0x7f
 800058c:	d828      	bhi.n	80005e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800058e:	4a2f      	ldr	r2, [pc, #188]	; (800064c <__NVIC_SetPriority+0xd4>)
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b25b      	sxtb	r3, r3
 8000596:	089b      	lsrs	r3, r3, #2
 8000598:	33c0      	adds	r3, #192	; 0xc0
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	589b      	ldr	r3, [r3, r2]
 800059e:	1dfa      	adds	r2, r7, #7
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	0011      	movs	r1, r2
 80005a4:	2203      	movs	r2, #3
 80005a6:	400a      	ands	r2, r1
 80005a8:	00d2      	lsls	r2, r2, #3
 80005aa:	21ff      	movs	r1, #255	; 0xff
 80005ac:	4091      	lsls	r1, r2
 80005ae:	000a      	movs	r2, r1
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	401a      	ands	r2, r3
 80005b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	019b      	lsls	r3, r3, #6
 80005ba:	22ff      	movs	r2, #255	; 0xff
 80005bc:	401a      	ands	r2, r3
 80005be:	1dfb      	adds	r3, r7, #7
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	0018      	movs	r0, r3
 80005c4:	2303      	movs	r3, #3
 80005c6:	4003      	ands	r3, r0
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005cc:	481f      	ldr	r0, [pc, #124]	; (800064c <__NVIC_SetPriority+0xd4>)
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	089b      	lsrs	r3, r3, #2
 80005d6:	430a      	orrs	r2, r1
 80005d8:	33c0      	adds	r3, #192	; 0xc0
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005de:	e031      	b.n	8000644 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <__NVIC_SetPriority+0xd8>)
 80005e2:	1dfb      	adds	r3, r7, #7
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	0019      	movs	r1, r3
 80005e8:	230f      	movs	r3, #15
 80005ea:	400b      	ands	r3, r1
 80005ec:	3b08      	subs	r3, #8
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	3306      	adds	r3, #6
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	18d3      	adds	r3, r2, r3
 80005f6:	3304      	adds	r3, #4
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	1dfa      	adds	r2, r7, #7
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	0011      	movs	r1, r2
 8000600:	2203      	movs	r2, #3
 8000602:	400a      	ands	r2, r1
 8000604:	00d2      	lsls	r2, r2, #3
 8000606:	21ff      	movs	r1, #255	; 0xff
 8000608:	4091      	lsls	r1, r2
 800060a:	000a      	movs	r2, r1
 800060c:	43d2      	mvns	r2, r2
 800060e:	401a      	ands	r2, r3
 8000610:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	019b      	lsls	r3, r3, #6
 8000616:	22ff      	movs	r2, #255	; 0xff
 8000618:	401a      	ands	r2, r3
 800061a:	1dfb      	adds	r3, r7, #7
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	0018      	movs	r0, r3
 8000620:	2303      	movs	r3, #3
 8000622:	4003      	ands	r3, r0
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <__NVIC_SetPriority+0xd8>)
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	001c      	movs	r4, r3
 8000630:	230f      	movs	r3, #15
 8000632:	4023      	ands	r3, r4
 8000634:	3b08      	subs	r3, #8
 8000636:	089b      	lsrs	r3, r3, #2
 8000638:	430a      	orrs	r2, r1
 800063a:	3306      	adds	r3, #6
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	18c3      	adds	r3, r0, r3
 8000640:	3304      	adds	r3, #4
 8000642:	601a      	str	r2, [r3, #0]
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b003      	add	sp, #12
 800064a:	bd90      	pop	{r4, r7, pc}
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <USART1_IRQHandler>:
#include "usart.h"

uint8_t data;
extern int start_stop;

void USART1_IRQHandler(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if((USART1->ISR & USART_CR1_RXNEIE) == USART_CR1_RXNEIE){
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <USART1_IRQHandler+0x28>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	2220      	movs	r2, #32
 800065e:	4013      	ands	r3, r2
 8000660:	2b20      	cmp	r3, #32
 8000662:	d108      	bne.n	8000676 <USART1_IRQHandler+0x22>
		USART1->ISR |= USART_ISR_RXNE;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <USART1_IRQHandler+0x28>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <USART1_IRQHandler+0x28>)
 800066a:	2120      	movs	r1, #32
 800066c:	430a      	orrs	r2, r1
 800066e:	61da      	str	r2, [r3, #28]
		start_stop = 0;
 8000670:	4b03      	ldr	r3, [pc, #12]	; (8000680 <USART1_IRQHandler+0x2c>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
	}
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40013800 	.word	0x40013800
 8000680:	2000002c 	.word	0x2000002c

08000684 <usart1_gpio_init>:
{
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
	GPIOC->MODER |= GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0;//output!!!!!!
}

void usart1_gpio_init(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <usart1_gpio_init+0x3c>)
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <usart1_gpio_init+0x3c>)
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	0289      	lsls	r1, r1, #10
 8000692:	430a      	orrs	r2, r1
 8000694:	615a      	str	r2, [r3, #20]
	//9 - TX, 10 - RX
	GPIOA->MODER |= GPIO_MODER_MODER9_1 | GPIO_MODER_MODER10_1; //AF mode
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	2390      	movs	r3, #144	; 0x90
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	21a0      	movs	r1, #160	; 0xa0
 80006a2:	0389      	lsls	r1, r1, #14
 80006a4:	430a      	orrs	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
	//AFRH - for older ports |= (1<<4)|(1<<8) - first AF
	GPIOA->AFR[1] |= (0x01 << GPIO_AFRH_AFSEL9_Pos) | (0x01 << GPIO_AFRH_AFSEL10_Pos); /* (4) */
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006ae:	2390      	movs	r3, #144	; 0x90
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2188      	movs	r1, #136	; 0x88
 80006b4:	0049      	lsls	r1, r1, #1
 80006b6:	430a      	orrs	r2, r1
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <usart1_init>:

void usart1_init(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	usart1_gpio_init();
 80006c8:	f7ff ffdc 	bl	8000684 <usart1_gpio_init>
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80006cc:	4b17      	ldr	r3, [pc, #92]	; (800072c <usart1_init+0x68>)
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <usart1_init+0x68>)
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	01c9      	lsls	r1, r1, #7
 80006d6:	430a      	orrs	r2, r1
 80006d8:	619a      	str	r2, [r3, #24]
	USART1->BRR |= 8000000/BAUD;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <usart1_init+0x6c>)
 80006dc:	68da      	ldr	r2, [r3, #12]
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <usart1_init+0x6c>)
 80006e0:	2145      	movs	r1, #69	; 0x45
 80006e2:	430a      	orrs	r2, r1
 80006e4:	60da      	str	r2, [r3, #12]
	USART1->CR3 |= USART_CR3_OVRDIS; //1 - data re- whrite
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <usart1_init+0x6c>)
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <usart1_init+0x6c>)
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	0149      	lsls	r1, r1, #5
 80006f0:	430a      	orrs	r2, r1
 80006f2:	609a      	str	r2, [r3, #8]
	USART1->CR1 |= USART_CR1_TE | USART_CR1_RE; //transmitter on
 80006f4:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <usart1_init+0x6c>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <usart1_init+0x6c>)
 80006fa:	210c      	movs	r1, #12
 80006fc:	430a      	orrs	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]
	//USART1->CR1 &= ~(USART_CR1_M1_0 | USART_CR1_M1_1);
	USART1->CR1 |= USART_CR1_RXNEIE;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <usart1_init+0x6c>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <usart1_init+0x6c>)
 8000706:	2120      	movs	r1, #32
 8000708:	430a      	orrs	r2, r1
 800070a:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(USART1_IRQn);
 800070c:	201b      	movs	r0, #27
 800070e:	f7ff ff19 	bl	8000544 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 2);
 8000712:	2102      	movs	r1, #2
 8000714:	201b      	movs	r0, #27
 8000716:	f7ff ff2f 	bl	8000578 <__NVIC_SetPriority>
	USART1->CR1 |= USART_CR1_UE;
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <usart1_init+0x6c>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <usart1_init+0x6c>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	601a      	str	r2, [r3, #0]
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	40013800 	.word	0x40013800

08000734 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000734:	480d      	ldr	r0, [pc, #52]	; (800076c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000736:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000738:	f7ff fd72 	bl	8000220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800073c:	480c      	ldr	r0, [pc, #48]	; (8000770 <LoopForever+0x6>)
  ldr r1, =_edata
 800073e:	490d      	ldr	r1, [pc, #52]	; (8000774 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000740:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <LoopForever+0xe>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000744:	e002      	b.n	800074c <LoopCopyDataInit>

08000746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074a:	3304      	adds	r3, #4

0800074c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800074c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000750:	d3f9      	bcc.n	8000746 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000754:	4c0a      	ldr	r4, [pc, #40]	; (8000780 <LoopForever+0x16>)
  movs r3, #0
 8000756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000758:	e001      	b.n	800075e <LoopFillZerobss>

0800075a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800075c:	3204      	adds	r2, #4

0800075e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000760:	d3fb      	bcc.n	800075a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000762:	f000 f811 	bl	8000788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000766:	f7ff fe21 	bl	80003ac <main>

0800076a <LoopForever>:

LoopForever:
    b LoopForever
 800076a:	e7fe      	b.n	800076a <LoopForever>
  ldr   r0, =_estack
 800076c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000774:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000778:	080007f0 	.word	0x080007f0
  ldr r2, =_sbss
 800077c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000780:	20000030 	.word	0x20000030

08000784 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000784:	e7fe      	b.n	8000784 <ADC_COMP_IRQHandler>
	...

08000788 <__libc_init_array>:
 8000788:	b570      	push	{r4, r5, r6, lr}
 800078a:	2600      	movs	r6, #0
 800078c:	4d0c      	ldr	r5, [pc, #48]	; (80007c0 <__libc_init_array+0x38>)
 800078e:	4c0d      	ldr	r4, [pc, #52]	; (80007c4 <__libc_init_array+0x3c>)
 8000790:	1b64      	subs	r4, r4, r5
 8000792:	10a4      	asrs	r4, r4, #2
 8000794:	42a6      	cmp	r6, r4
 8000796:	d109      	bne.n	80007ac <__libc_init_array+0x24>
 8000798:	2600      	movs	r6, #0
 800079a:	f000 f819 	bl	80007d0 <_init>
 800079e:	4d0a      	ldr	r5, [pc, #40]	; (80007c8 <__libc_init_array+0x40>)
 80007a0:	4c0a      	ldr	r4, [pc, #40]	; (80007cc <__libc_init_array+0x44>)
 80007a2:	1b64      	subs	r4, r4, r5
 80007a4:	10a4      	asrs	r4, r4, #2
 80007a6:	42a6      	cmp	r6, r4
 80007a8:	d105      	bne.n	80007b6 <__libc_init_array+0x2e>
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	00b3      	lsls	r3, r6, #2
 80007ae:	58eb      	ldr	r3, [r5, r3]
 80007b0:	4798      	blx	r3
 80007b2:	3601      	adds	r6, #1
 80007b4:	e7ee      	b.n	8000794 <__libc_init_array+0xc>
 80007b6:	00b3      	lsls	r3, r6, #2
 80007b8:	58eb      	ldr	r3, [r5, r3]
 80007ba:	4798      	blx	r3
 80007bc:	3601      	adds	r6, #1
 80007be:	e7f2      	b.n	80007a6 <__libc_init_array+0x1e>
 80007c0:	080007e8 	.word	0x080007e8
 80007c4:	080007e8 	.word	0x080007e8
 80007c8:	080007e8 	.word	0x080007e8
 80007cc:	080007ec 	.word	0x080007ec

080007d0 <_init>:
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d6:	bc08      	pop	{r3}
 80007d8:	469e      	mov	lr, r3
 80007da:	4770      	bx	lr

080007dc <_fini>:
 80007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e2:	bc08      	pop	{r3}
 80007e4:	469e      	mov	lr, r3
 80007e6:	4770      	bx	lr
